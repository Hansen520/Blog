// 高阶函数的概念
// 1、一个函数的参数是函数，我们称之为这个函数为高阶函数(函数的参数为函数)
// 2、 一个函数返回一个函数也称之为高阶函数(函数返回函数)

function eat(...args) {
  console.log('吃饭', args);
}

// 在开发过程中我们不希望破坏(更改)原有的函数，要对这个函数进行扩展
Function.prototype.before = function (beforeFn) {
  // 谁调用方法this就指向谁
  return (...args) => {
    beforeFn();
    // 箭头函数中没有this，那么会向上查找(这里指向eat)
    this(...args);
  };
};
let newFn = eat.before(() => {
  console.log('刷牙');
});

newFn('白米饭');

// 以后再扩展代码的时候，尽量不直接更改原来的函数，采用高阶函数进行包裹，在内部进行扩展

// 函数执行的时候产生了执行上下文，代码在定义的时候就去欸的那个了作用域
// 开发过程的闭包: 函数定义的作用域和执行的作用域不是同一个就会产生闭包
// 打个比方来说， 在一个函数里面的 返回函数 在window上的外面执行，就会形成闭包
